#!/usr/bin/env python

from django.models.aggemam import feedupdates
from django.models.aggemam import messages
from django.models.aggemam import posts
from django.models.aggemam import links

from django.core.db import db

from ibofobi.apps.aggemam.utils import parser

import sys
import traceback
import datetime

ramp_up_factor = 0.5
back_off_factor = 1.25
max_update_interval = 24 * 60
min_update_interval = 60

def process_updates():
    for update in feedupdates.get_list(processed__exact=False):
        try:
            feed = update.get_feed()

            if update.result == 'ok':
                new_posts = process_update_ok(feed, update)
            elif update.result == 'no':
                new_posts = 0
            elif update.result == 'rm':
                new_posts = 0
                feed.update = False
                feed.save()
                print 'Feed %s is gone (http://admin.ibofobi.dk/aggemam/feedupdates/%d/)' % (update.id,)
                print 'Disabling update of feed (http://admin.ibofobi.dk/aggemam/feeds/%d/)' % (feed.id,)
                print
            elif update.result == 'er':
                new_posts = 0
                # FIXME -- set feed.update = False after N failed fetches?
                print 'Update of feed %s (http://admin.ibofobi.dk/aggemam/feeds/%d/) failed' % (feed, feed.id)
                print 'in feed-update %d (http://admin.ibofobi.dk/aggemam/feedupdates/%d/)' % (update.id, update.id)
                print
            elif update.result == 'ot':
                new_posts = 0
                feed.update = False
                feed.save()
                print 'Feed update %d (http://admin.ibofobi.dk/aggemam/feedupdates/%d/)' % (update.id, update.id)
                print 'has an unknown HTTP status code (%d), needs manual handling.'
                print 'Disabling update of feed (http://admin.ibofobi.dk/aggemam/feeds/%d/)' % (feed.id,)
                print
            else:
                raise `update.result`

            if new_posts:
                feed.update_interval = int(feed.update_interval * ramp_up_factor)
            else:
                feed.update_interval = int(feed.update_interval * back_off_factor)
            feed.update_interval = max(feed.update_interval, min_update_interval)
            feed.update_interval = min(feed.update_interval, max_update_interval)

            i = datetime.timedelta(seconds=feed.update_interval * 60)
            feed.next_update = datetime.datetime.now() + i
            feed.save()

            update.processed = True
            update.save()

            db.commit()

        except:
            db.rollback()
        
            traceback.print_exception(*(sys.exc_info()))
            print

def process_update_ok(feed, update):
    feed_prime, posts_prime = parser.parse_feed(update.http_content,
                                                feed.url)

    posts_prime.reverse()

    feed.title = feed_prime['title']
    feed.link = feed_prime['link']
    feed.save()

    new_posts = 0

    for p in posts_prime:
        if posts.get_count(guid__exact=p['guid']):
            continue

        post = posts.Post(feed=feed, guid=p['guid'])
        post.posted = p['posted']
        post.title = p['title']
        post.author = p['author'] or feed_prime['author']
        post.category = p['category']
        post.summary = p['summary']
        post.content = p['content']
        post.save()

        for l in p['links']:
            link = links.Link(post=post)
            link.href = l['href']
            link.type = l['type']
            link.title = l['title']
            link.save()

        new_posts = new_posts + 1

    m = messages.Message(severity=3,
                         short='Processed %s' % update,
                         detailed=None)
    m.save()

    return new_posts

if __name__ == '__main__':
    process_updates()
